/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as PostIndexImport } from './routes/post/index';
import { Route as PostIdImport } from './routes/post/$id';

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')();

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route));

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const PostIndexRoute = PostIndexImport.update({
  id: '/post/',
  path: '/post/',
  getParentRoute: () => rootRoute,
} as any);

const PostIdRoute = PostIdImport.update({
  id: '/post/$id',
  path: '/post/$id',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/post/$id': {
      id: '/post/$id';
      path: '/post/$id';
      fullPath: '/post/$id';
      preLoaderRoute: typeof PostIdImport;
      parentRoute: typeof rootRoute;
    };
    '/post/': {
      id: '/post/';
      path: '/post';
      fullPath: '/post';
      preLoaderRoute: typeof PostIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/about': typeof AboutLazyRoute;
  '/post/$id': typeof PostIdRoute;
  '/post': typeof PostIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutLazyRoute;
  '/post/$id': typeof PostIdRoute;
  '/post': typeof PostIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/about': typeof AboutLazyRoute;
  '/post/$id': typeof PostIdRoute;
  '/post/': typeof PostIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/about' | '/post/$id' | '/post';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/about' | '/post/$id' | '/post';
  id: '__root__' | '/' | '/about' | '/post/$id' | '/post/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutLazyRoute: typeof AboutLazyRoute;
  PostIdRoute: typeof PostIdRoute;
  PostIndexRoute: typeof PostIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  PostIdRoute: PostIdRoute,
  PostIndexRoute: PostIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/post/$id",
        "/post/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/post/$id": {
      "filePath": "post/$id.tsx"
    },
    "/post/": {
      "filePath": "post/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
